name: Simple Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

env:
  NODE_VERSION: '18'

jobs:
  # 简化的部署任务
  deploy:
    runs-on: ubuntu-latest
    
    environment: production
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4

    - name: 部署到服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # 创建部署目录
          mkdir -p /opt/wechat-education
          cd /opt/wechat-education
          
          # 备份当前版本
          if [ -d "current" ]; then
            mv current backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
          fi
          
          # 克隆最新代码
          git clone https://github.com/${{ github.repository }}.git current
          cd current
          
          # 使用统一脚本安装依赖
          chmod +x scripts/dev.sh
          npm install
          cd backend && npm install && cd ..
          
          # 创建环境配置
          if [ -f .env.production ]; then
            cp .env.production .env
          else
            cat > .env << 'EOF'
          NODE_ENV=production
          MYSQL_ROOT_PASSWORD=secure_root_pass_2024
          MYSQL_DATABASE=wechat_education
          MYSQL_USER=appuser
          MYSQL_PASSWORD=secure_app_pass_2024
          MYSQL_PORT=3306
          REDIS_PORT=6379
          JWT_SECRET=your_very_secure_jwt_secret_key_change_this_in_production_2024
          BACKEND_PORT=3000
          NGINX_HTTP_PORT=80
          NGINX_HTTPS_PORT=443
          CORS_ORIGIN=*
          # 数据库字符集配置
          DB_CHARSET=utf8mb4
          DB_COLLATE=utf8mb4_0900_ai_ci
          EOF
          fi
          
          # 使用统一脚本停止服务
          chmod +x scripts/dev.sh
          scripts/dev.sh stop 2>/dev/null || docker-compose down 2>/dev/null || true
          
          # 使用统一脚本启动生产环境
          scripts/dev.sh prod || docker-compose up -d --build
          
          # 等待数据库服务启动
          echo "等待数据库服务启动..."
          sleep 30
          
          # 检查数据库是否已启动
          echo "检查数据库连接..."
          max_db_attempts=20
          db_attempt=1
          while [ $db_attempt -le $max_db_attempts ]; do
            if docker-compose exec -T mysql mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD 2>/dev/null; then
              echo "✅ 数据库连接成功"
              break
            else
              echo "尝试 $db_attempt/$max_db_attempts: 数据库尚未就绪，等待5秒..."
              sleep 5
              db_attempt=$((db_attempt + 1))
            fi
          done
          
          # 初始化数据库数据（如果需要）
          echo "初始化数据库数据..."
          if [ -f "database/init/01-init-database.sql" ]; then
            docker-compose exec -T mysql mysql -u root -p$MYSQL_ROOT_PASSWORD $MYSQL_DATABASE < database/init/01-init-database.sql
            echo "✅ 数据库已初始化"
          else
            echo "⚠️  未找到数据库初始化脚本"
          fi
          
          # 等待后端服务启动
          echo "等待后端服务启动..."
          sleep 30
          
          # 健康检查
          max_attempts=10
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            # 检查后端API健康状态
            if curl -f http://localhost:$BACKEND_PORT/api/v1/health 2>/dev/null; then
              echo "✅ 后端API服务正常"
              # 检查Nginx代理（如果启用）
              if curl -f http://localhost/health 2>/dev/null; then
                echo "✅ Nginx代理服务正常"
              else
                echo "⚠️  Nginx代理可能未启用，但后端服务正常"
              fi
              echo "✅ 部署成功！服务正常运行"
              # 清理旧备份（保留最近3个）
              ls -t backup-* 2>/dev/null | tail -n +4 | xargs rm -rf 2>/dev/null || true
              exit 0
            else
              echo "尝试 $attempt/$max_attempts: 服务尚未就绪，等待10秒..."
              echo "检查容器状态:"
              docker-compose ps
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          echo "❌ 部署失败，服务健康检查未通过"
          echo "查看服务状态:"
          docker-compose ps
          echo "查看日志:"
          docker-compose logs --tail=50
          exit 1

  # 通知
  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 发送部署通知
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ 部署成功！应用已更新到最新版本。"
          echo "🌐 前端访问地址: http://${{ secrets.SERVER_HOST }}"
          echo "🔗 后端API地址: http://${{ secrets.SERVER_HOST }}:3000"  
          echo "📋 API健康检查: http://${{ secrets.SERVER_HOST }}:3000/api/v1/health"
          echo "📝 论坛功能: http://${{ secrets.SERVER_HOST }}/forum"
          echo "📚 资源中心: http://${{ secrets.SERVER_HOST }}/resources"
        else
          echo "❌ 部署失败！请检查日志并重试。"
        fi